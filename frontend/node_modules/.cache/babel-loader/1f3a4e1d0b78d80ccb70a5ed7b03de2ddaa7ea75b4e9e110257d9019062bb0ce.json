{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\n\n// Создаем экземпляр axios с базовым URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Интерцептор для добавления токена авторизации\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Интерцептор для обработки ошибок авторизации\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // Перенаправляем на страницу входа при ошибке авторизации\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Сервис для аутентификации\nexport const authService = {\n  login: credentials => api.post('/auth/login', credentials),\n  checkAuth: () => api.get('/auth/check'),\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  },\n  isAdmin: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user).isAdmin : false;\n  }\n};\n\n// Сервис для автомобилей\nexport const carService = {\n  getAllCars: () => api.get('/cars'),\n  getCarById: id => api.get(`/cars/${id}`),\n  createCar: car => api.post('/admin/cars', car),\n  updateCar: (id, car) => api.put(`/admin/cars/${id}`, car),\n  deleteCar: id => api.delete(`/admin/cars/${id}`),\n  getNewCars: () => api.get('/cars/new'),\n  getLowMileageCars: () => api.get('/cars/low-mileage'),\n  getMostExpensiveCar: () => api.get('/cars/most-expensive')\n};\n\n// Сервис для покупателей\nexport const customerService = {\n  getAllCustomers: () => api.get('/customers'),\n  getCustomerById: id => api.get(`/customers/${id}`),\n  createCustomer: customer => api.post('/admin/customers', customer),\n  updateCustomer: (id, customer) => api.put(`/admin/customers/${id}`, customer),\n  deleteCustomer: id => api.delete(`/admin/customers/${id}`),\n  getCustomersByModel: model => api.get(`/customers/by-model?model=${model}`),\n  getCustomersForCar: carId => api.get(`/customers/match-car/${carId}`)\n};\n\n// Сервис для автосалонов\nexport const shopService = {\n  getAllShops: () => api.get('/shops'),\n  getShopById: id => api.get(`/shops/${id}`),\n  createShop: shop => api.post('/admin/shops', shop)\n};\n\n// Сервис для брендов и моделей\nexport const brandService = {\n  getAllBrands: () => api.get('/brands'),\n  getBrandById: id => api.get(`/brands/${id}`),\n  createBrand: brand => api.post('/admin/brands', brand)\n};\nexport const modelService = {\n  getAllModels: () => api.get('/models'),\n  getModelsByBrand: brandId => api.get(`/brands/${brandId}/models`),\n  createModel: model => api.post('/admin/models', model)\n};\n\n// Сервис для расчетов\nexport const calculatorService = {\n  calculateMonthlyPayment: data => api.post('/calculator/monthly-payment', data),\n  calculateTotalCost: data => api.post('/calculator/total-cost', data),\n  calculateImport: data => api.post('/calculator/import', data)\n};\n\n// Сервис для рыночной статистики\nexport const marketService = {\n  getMarketRatio: () => api.get('/market/ratio')\n};\n\n// Сервис для сотрудников\nexport const employeeService = {\n  getAllEmployees: () => api.get('/employees'),\n  getEmployeeById: id => api.get(`/employees/${id}`),\n  createEmployee: employee => api.post('/admin/employees', employee),\n  updateEmployee: (id, employee) => api.put(`/admin/employees/${id}`, employee),\n  deleteEmployee: id => api.delete(`/admin/employees/${id}`)\n};\n\n// Сервис для продаж\nexport const saleService = {\n  getAllSales: () => api.get('/sales'),\n  getSaleById: id => api.get(`/sales/${id}`),\n  createSale: sale => api.post('/admin/sales', sale)\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href","authService","login","credentials","post","checkAuth","get","logout","getCurrentUser","user","JSON","parse","isAuthenticated","isAdmin","carService","getAllCars","getCarById","id","createCar","car","updateCar","put","deleteCar","delete","getNewCars","getLowMileageCars","getMostExpensiveCar","customerService","getAllCustomers","getCustomerById","createCustomer","customer","updateCustomer","deleteCustomer","getCustomersByModel","model","getCustomersForCar","carId","shopService","getAllShops","getShopById","createShop","shop","brandService","getAllBrands","getBrandById","createBrand","brand","modelService","getAllModels","getModelsByBrand","brandId","createModel","calculatorService","calculateMonthlyPayment","data","calculateTotalCost","calculateImport","marketService","getMarketRatio","employeeService","getAllEmployees","getEmployeeById","createEmployee","employee","updateEmployee","deleteEmployee","saleService","getAllSales","getSaleById","createSale","sale"],"sources":["D:/shit11/kursach/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\n// Создаем экземпляр axios с базовым URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Интерцептор для добавления токена авторизации\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Интерцептор для обработки ошибок авторизации\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Перенаправляем на страницу входа при ошибке авторизации\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Сервис для аутентификации\r\nexport const authService = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  checkAuth: () => api.get('/auth/check'),\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('token');\r\n  },\r\n  isAdmin: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user).isAdmin : false;\r\n  },\r\n};\r\n\r\n// Сервис для автомобилей\r\nexport const carService = {\r\n  getAllCars: () => api.get('/cars'),\r\n  getCarById: (id) => api.get(`/cars/${id}`),\r\n  createCar: (car) => api.post('/admin/cars', car),\r\n  updateCar: (id, car) => api.put(`/admin/cars/${id}`, car),\r\n  deleteCar: (id) => api.delete(`/admin/cars/${id}`),\r\n  getNewCars: () => api.get('/cars/new'),\r\n  getLowMileageCars: () => api.get('/cars/low-mileage'),\r\n  getMostExpensiveCar: () => api.get('/cars/most-expensive'),\r\n};\r\n\r\n// Сервис для покупателей\r\nexport const customerService = {\r\n  getAllCustomers: () => api.get('/customers'),\r\n  getCustomerById: (id) => api.get(`/customers/${id}`),\r\n  createCustomer: (customer) => api.post('/admin/customers', customer),\r\n  updateCustomer: (id, customer) => api.put(`/admin/customers/${id}`, customer),\r\n  deleteCustomer: (id) => api.delete(`/admin/customers/${id}`),\r\n  getCustomersByModel: (model) => api.get(`/customers/by-model?model=${model}`),\r\n  getCustomersForCar: (carId) => api.get(`/customers/match-car/${carId}`),\r\n};\r\n\r\n// Сервис для автосалонов\r\nexport const shopService = {\r\n  getAllShops: () => api.get('/shops'),\r\n  getShopById: (id) => api.get(`/shops/${id}`),\r\n  createShop: (shop) => api.post('/admin/shops', shop),\r\n};\r\n\r\n// Сервис для брендов и моделей\r\nexport const brandService = {\r\n  getAllBrands: () => api.get('/brands'),\r\n  getBrandById: (id) => api.get(`/brands/${id}`),\r\n  createBrand: (brand) => api.post('/admin/brands', brand),\r\n};\r\n\r\nexport const modelService = {\r\n  getAllModels: () => api.get('/models'),\r\n  getModelsByBrand: (brandId) => api.get(`/brands/${brandId}/models`),\r\n  createModel: (model) => api.post('/admin/models', model),\r\n};\r\n\r\n// Сервис для расчетов\r\nexport const calculatorService = {\r\n  calculateMonthlyPayment: (data) => api.post('/calculator/monthly-payment', data),\r\n  calculateTotalCost: (data) => api.post('/calculator/total-cost', data),\r\n  calculateImport: (data) => api.post('/calculator/import', data),\r\n};\r\n\r\n// Сервис для рыночной статистики\r\nexport const marketService = {\r\n  getMarketRatio: () => api.get('/market/ratio'),\r\n};\r\n\r\n// Сервис для сотрудников\r\nexport const employeeService = {\r\n  getAllEmployees: () => api.get('/employees'),\r\n  getEmployeeById: (id) => api.get(`/employees/${id}`),\r\n  createEmployee: (employee) => api.post('/admin/employees', employee),\r\n  updateEmployee: (id, employee) => api.put(`/admin/employees/${id}`, employee),\r\n  deleteEmployee: (id) => api.delete(`/admin/employees/${id}`),\r\n};\r\n\r\n// Сервис для продаж\r\nexport const saleService = {\r\n  getAllSales: () => api.get('/sales'),\r\n  getSaleById: (id) => api.get(`/sales/${id}`),\r\n  createSale: (sale) => api.post('/admin/sales', sale),\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}